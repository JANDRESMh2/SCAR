#include <iostream>
#include <vector>
#include <chrono>
#include <omp.h>

using namespace std;

using Matrix = vector<vector<int>>;

Matrix multiplyMatrices(const Matrix& A, const Matrix& B) {
    int m = A.size();
    int n = A[0].size();
    int p = B[0].size();

    Matrix C(m, vector<int>(p, 0));

    #pragma omp parallel for
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < p; ++j) {
            #pragma omp simd
            for (int k = 0; k < n; ++k) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    return C;
}

void printMatrix(const Matrix& matrix) {
    for (const auto& row : matrix) {
        for (const auto& val : row) {
            cout << val << " ";
        }
        cout << endl;
    }
}

int main() {
    Matrix A = {{-1, 4}, {2, 3}};
    Matrix B = {{9, -3}, {6, 1}};

    auto start = chrono::high_resolution_clock::now();
    Matrix C = multiplyMatrices(A, B);
    auto end = chrono::high_resolution_clock::now();

    chrono::duration<double> duration = end - start;
    cout << "Time taken: " << duration.count() << " seconds" << endl;

    cout << "Resultant matrix:" << endl;
    printMatrix(C);

    return 0;
}
